Issue {issueClosedAt = Nothing, issueUpdatedAt = GithubDate {fromGithubDate = 2013-04-12 14:35:17 UTC}, issueHtmlUrl = "https://github.com/pydata/patsy/issues/18", issueClosedBy = Nothing, issueLabels = [], issueNumber = 18, issueAssignee = Nothing, issueUser = GithubUser {githubOwnerAvatarUrl = "https://secure.gravatar.com/avatar/4d5bc4c1c4779430f592c96f27b76992?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png", githubOwnerLogin = "signalseeker", githubOwnerUrl = "https://api.github.com/users/signalseeker", githubOwnerId = 112979, githubOwnerGravatarId = "4d5bc4c1c4779430f592c96f27b76992"}, issueTitle = "Maximum recursion depth error for formulas with more than 485 terms", issuePullRequest = PullRequestReference {pullRequestReferenceHtmlUrl = Nothing, pullRequestReferencePatchUrl = Nothing, pullRequestReferenceDiffUrl = Nothing}, issueUrl = "https://api.github.com/repos/pydata/patsy/issues/18", issueCreatedAt = GithubDate {fromGithubDate = 2013-04-12 13:04:46 UTC}, issueBody = "I am working with a dataframe which has 7000 columns and it turns out that once you go beyond 485 terms, patsy throws a recursion error when going from a formula to a design matrix. Is there a better way of doing this?\r\n\r\nThanks!\r\n\r\n```python\r\nIn [282]: df = pd.DataFrame(dict(('a' + str(i), np.random.randn(5)) for i in xrange(500)))\r\n\r\nIn [283]: formula = \" + \".join(df.columns)\r\n\r\nIn [284]: dmatrices(formula, df)\r\n\r\n....\r\n\r\n/Users/xxx/lib/python2.7/site-packages/patsy-0.1.0_dev-py2.7.egg/patsy/desc.pyc in eval(self, tree, require_evalexpr)\r\n    452                                 \"'%s' operator\" % (tree.type,),\r\n    453                                 tree.token)\r\n--> 454         result = self._evaluators[key](self, tree)\r\n    455         if require_evalexpr and not isinstance(result, IntermediateExpr):\r\n    456             if isinstance(result, ModelDesc):\r\n\r\n/Users/xxx/lib/python2.7/site-packages/patsy-0.1.0_dev-py2.7.egg/patsy/desc.pyc in _eval_binary_plus(evaluator, tree)\r\n    283\r\n    284 def _eval_binary_plus(evaluator, tree):\r\n--> 285     left_expr = evaluator.eval(tree.args[0])\r\n    286     if tree.args[1].type == \"ZERO\":\r\n    287         return IntermediateExpr(False, None, True, left_expr.terms)\r\n\r\n/Users/xxx/lib/python2.7/site-packages/patsy-0.1.0_dev-py2.7.egg/patsy/desc.pyc in eval(self, tree, require_evalexpr)\r\n    452                                 \"'%s' operator\" % (tree.type,),\r\n    453                                 tree.token)\r\n--> 454         result = self._evaluators[key](self, tree)\r\n    455         if require_evalexpr and not isinstance(result, IntermediateExpr):\r\n    456             if isinstance(result, ModelDesc):\r\n\r\n/Users/xxx/lib/python2.7/site-packages/patsy-0.1.0_dev-py2.7.egg/patsy/desc.pyc in _eval_binary_plus(evaluator, tree)\r\n    283\r\n    284 def _eval_binary_plus(evaluator, tree):\r\n--> 285     left_expr = evaluator.eval(tree.args[0])\r\n    286     if tree.args[1].type == \"ZERO\":\r\n    287         return IntermediateExpr(False, None, True,\r\n    left_expr.terms)\r\n    \r\n/Users/xxx/lib/python2.7/site-packages/patsy-0.1.0_dev-py2.7.egg/patsy/desc.pyc in eval(self, tree, require_evalexpr)\r\n    448         assert isinstance(tree, ParseNode)\r\n    449         key = (tree.type, len(tree.args))\r\n--> 450         if key not in self._evaluators:\r\n    451             raise PatsyError(\"I don't know how to evaluate this \"\r\n    452                                 \"'%s' operator\" % (tree.type,),\r\n\r\nRuntimeError: maximum recursion depth exceeded in cmp\r\n```", issueState = "open", issueId = 13118084, issueComments = 3, issueMilestone = Nothing}