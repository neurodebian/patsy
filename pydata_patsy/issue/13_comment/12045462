IssueComment {issueCommentUpdatedAt = GithubDate {fromGithubDate = 2013-01-09 14:09:40 UTC}, issueCommentUser = GithubUser {githubOwnerAvatarUrl = "https://secure.gravatar.com/avatar/97c543aca1ac7bbcfb5279d0300c8330?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png", githubOwnerLogin = "njsmith", githubOwnerUrl = "https://api.github.com/users/njsmith", githubOwnerId = 609896, githubOwnerGravatarId = "97c543aca1ac7bbcfb5279d0300c8330"}, issueCommentUrl = "https://api.github.com/repos/pydata/patsy/issues/comments/12045462", issueCommentCreatedAt = GithubDate {fromGithubDate = 2013-01-09 14:09:40 UTC}, issueCommentBody = "You have an object named `C` in your scope (a `ClassRegistry` object, apparently), which is shadowing the built-in `C` function. Compare to:\r\n```\r\nIn [3]: C = 1\r\n\r\nIn [4]: patsy.dmatrix(\"C(a)\", {\"a\": [\"m\", \"n\", \"o\"]})\r\nTypeError: 'int' object is not callable\r\n```\r\n\r\nI'm not sure what the right thing to do here is. We could make builtins override things in the scope, but that gets a bit icky if it means that you can't use variables named \"C\" without jumping through hoops, and whenever we add a new builtin it would potentially break existing scripts.\r\n\r\nMaybe we should keep the current behaviour, but issue a warning whenever someone looks up a builtin name but gets something else, i.e. it gets shadowed? That would preserve the semantics of existing formulas when we change the set of builtins, but it would still encourage people to avoid such names when possible.\r\n\r\nWould you be interested in preparing a pull request implementing such a warning? It'd involve adding some code to `VarLookupDict` to keep track of `warn_if_shadowed` namespaces, and then on lookup doing something like\r\n```\r\nfor warn_if_shadowed in self.warn_if_shadowed_namespaces:\r\n  if key in warn_if_shadowed and key is not warn_if_shadowed[key]:\r\n    warnings.warn(...)\r\n```\r\nand then we'd add an argument to `EvalEnvironment.add_outer_namespace` to let you flag an added namespace as having this special property, and then in `desc.py` when we call `add_outer_namespace` to add the builtins we'd use this argument. Plus tests, of course.", issueCommentId = 12045462}