IssueComment {issueCommentUpdatedAt = GithubDate {fromGithubDate = 2013-05-24 12:58:23 UTC}, issueCommentUser = GithubUser {githubOwnerAvatarUrl = "https://secure.gravatar.com/avatar/97c543aca1ac7bbcfb5279d0300c8330?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png", githubOwnerLogin = "njsmith", githubOwnerUrl = "https://api.github.com/users/njsmith", githubOwnerId = 609896, githubOwnerGravatarId = "97c543aca1ac7bbcfb5279d0300c8330"}, issueCommentUrl = "https://api.github.com/repos/pydata/patsy/issues/comments/18403161", issueCommentCreatedAt = GithubDate {fromGithubDate = 2013-05-24 12:58:23 UTC}, issueCommentBody = "There are two parts to the name -- the \"C(trimcod, Treatment(4))\" is the\r\nliteral Python code that was executed to get the variable, and the \"[T.3]\"\r\npart is added on by the categorical variable coder.\r\n\r\nThere really isn't any way to pull out \"trimcod\" from \"C(trimcod,\r\nTreatment(4))\", because that would require parsing Python source code...\r\nnote that C() and Treatment() are just regular Python functions.\r\n\r\nIn the short run, you can store the output of C() to a temporary variable\r\nwith whatever name you want, and use that in your formula:\r\n\r\nCtrimcod = patsy.C(trimcod, patsy.Treatment(4))\r\nCflota = patsy.C(flota, patsy.Treatment(4))\r\nlm(\"y ~ Ctrimcod * Cfloat\", ...)\r\n\r\nBut Ctrimcod and Cflota will be strange opaque objects that you can't do\r\nmuch else with, so you'll want to keep the original variables around as\r\nwell.\r\n\r\nThe real solution in the long run will be to implement a proper data type\r\nin Python for storing categorical data, and which can have default coding\r\noptions attached to it -- basically turning the output of C() into an\r\nobject that's actually useful. That's how this stuff works in R -- if you\r\nstore your data as a \"factor\" object, you can attach the equivalent of\r\nTreatment(4) to it directly. But this will take a while, since it needs\r\nenhancements in numpy, in pandas, etc.\r\n\r\nOn Fri, May 24, 2013 at 12:50 PM, jtornero <notifications@github.com> wrote:\r\n\r\n> First I want to thank the developer team for their excellent work.\r\n>\r\n> Well, I feel that the \"predictors\" names when using for instaqnce C(\r\n> predictor, Treatment(5)) ar too long and somehow confusing. When you make\r\n> interactions between predictors, you get things like:\r\n>\r\n> C(trimcod, Treatment(4))[T.3]:C(flota, Treatment(11))[T.10]\r\n>\r\n> It would be nice to be able to assign an alias or just forget all the\r\n> stuff apart from the predictor name to get something like:\r\n>\r\n> [trimcod][T.3]\r\n>\r\n> or just [trimcod 3]\r\n>\r\n> I've playng with the MyTreat example but I can't get any positive results\r\n>\r\n> Thank you very much\r\n>\r\n> Jorge Tornero\r\n>\r\n> \8212\r\n> Reply to this email directly or view it on GitHub<https://github.com/pydata/patsy/issues/19>\r\n> .\r\n>", issueCommentId = 18403161}